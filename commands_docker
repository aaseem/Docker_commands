curl -fsSL get.docker.com -o get-docker.sh

sh get-docker.sh

>after successful completion of above command in output 
get command who add user to docker group.

curl -L https://github.com/docker/machine/releases/download/v0.12.2/docker-machine-`uname -s`-`uname -m` > /tmp/docker-machine &&
> chmod +x /tmp/docker-machine &&
> sudo cp /tmp/docker-machine /usr/local/bin/docker-machine

sudo -i  

curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose

docker-compose version


sudo apt install git

git clone https://github.com/BretFisher/udemy-docker-mastery.git

docker info
docker version

docker container run --publish 80:80 nginx

docker container run --publish 80:80 --detach nginx   ---to run in background


docker container ls(docker ps --old syntax)

docker container ls -a




sudo apt-get install chrome-browser ---extra


docker container top webhost

docker container rm 303 2e13 5677 ----last argumnets are container ids


docker container rm -f 02af  ---forcefully remove running container..

docker run --name mongo -d mongo ---

ps aux

docker stop mongo
docker start mongo

I have clone 

docker container run -d --name webserver -p 8080:80 httpd
docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

docker container logs db
docker container run -d --name proxy -p 80:80 nginx

curl localhost   --to check ngnix correctly install or not
curl localhost:8080  --to check httpd correctly install or not

docker container stop db proxy webserver   ---press tab after stop to get entries

docker container rm -f db proxy webserver

docker image ls



docker container top mysql  --process running in a container 
docker container top nginx

docker container inspect mysql   ---provide details of container(coniguration)

docker container stats ----performance stats of all containers or one container


docker container run -it  ---start new container interactively

docker container exec -it  ---run additional command on existing container

docker container run -it --name proxy nginx bash

docker container run -it --name ubuntu ubuntu   ---here we have not specified bash because ubuntu bydefault is bash

apt-get update

apt-get install -y curl

curl google.com ----question what is curl command

docker container start -ai ubuntu  ---why -ai

docker pull alpine (mini size linux)

docker container run -it alpine bash   ---it will give errors as you can only run process which is part of 
                                       ---image(bash not present in alpine image)

docker container run -it alpine sh

----what is bridge network
---what is NAT firewall

docker container run -p 80:80 --name webserver -d nginx

docker container port container_name  

docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webserver   --provide container ip address

---what is firewall
--what is local host
--what is eth0

docker create network my_app_net

docker container run -d --name new_nginx --network my_app_net nginx


docker container inspect container_name
docker network inspect network_name

docker network connect network_name container_name

docker network disconnect my_app_net webserver


















